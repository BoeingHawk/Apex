//Child to Parent Trigger Scenarios




//Update on Child and Update on Parent
//Whenever the Amount field on an Opportunity is updated to a value greater than 100,000, the Account field High_Value_Opportunity__c (custom checkbox) should be set to true.


trigger OpTrigger on Opportunity(after update){
    If(Trigger.isUpdate && Trigger.isAfter){
        Map<Id,Boolean> accountIds = new Map<Id,Boolean>();
        For(Opportunity opp : Trigger.New){
            If(opp.Amount > 100000 && opp.AccountId != null){
                accountIds.put(opp.AccountId,True);
            }
        }
		List<Account> accountList = [SELECT Id, High_Value_Opportunity__c FROM Account WHERE Id IN : accountIds.keySet()];
        For(Account acc : accountList){
            acc.High_Value_Opportunity__c = True;
        }
		update accountList;
    }
}


//Update on Child and Update on Parent
//Whenever the Description field on an Contact is updated, the Description field on Account object should also be changed.

////////// My Code - The way in which I write the code

/*

trigger ContactTrigger on Contact(after Update){
If(trigger.isAfter && Trigger.isUpdate){
Map<Id,String> accountIds = new Map<Id,String>();

        For(Contact con: Trigger.New){
            If(con.Description != Trigger.oldMap.get(con.Id).Description){
                accountIds.put(con.AccountId,con.Description);
            }
        }

List<Account> accountList = [SELECT Id, Description FROM Account WHERE Id IN : accountIds.keySet()];
For(Account acc : accountList){
If(accountIds.containsKey(acc.Id)){
acc.Description = accountIds.get(acc.Id);
System.debug(accountIds.get(acc.Id));
}    

}
update accountList;

}
}


/*



////Alternative Code


/*

trigger ContactTrigger on Contact (after update) {
If(trigger.isAfter && trigger.isUpdate){
Set<Id> accountIds = new Set<Id>();
Map<Id,String> accountDescriptions = new Map<Id,String>();

for(Contact con : Trigger.new){
If(con.Description != Trigger.oldMap.get(con.Id).Description){
accountIds.add(con.AccountId);
accountDescriptions.put(con.AccountId,con.Description);
}
}

List<Account> accountList = [SELECT Id, Description FROM Account WHERE ID IN : accountIds];
For(Account acc : accountList){
if (accountDescriptions.containsKey(acc.Id)) {
acc.Description = accountDescriptions.get(acc.Id);
} 
}
update accountList;


}
}


*/
